{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nconst options = {\n  data() {\n    return {\n      _password: '',\n      //确认密码\n      checkCode: '',\n      //验证码\n      isExist: false,\n      //账号是否存在\n      user: {\n        uid: '',\n        uname: '',\n        uphone: '',\n        password: ''\n      }\n    };\n  },\n  methods: {\n    //跳转到登录页面\n    goLogin() {\n      this.$store.commit('setFlash', true);\n      this.$router.push({\n        path: '/login'\n      });\n    },\n    //刷新验证码\n    freshCheckCode() {\n      document.getElementById('img_check').src = '/api/checkCode?id=' + new Date().getTime();\n    },\n    //验证账号是否存在\n    idBlur() {\n      if (this.user.uid === '') {\n        this.$message({\n          message: '请输入账号',\n          type: 'error'\n        });\n        return false;\n      } else if (this.user.uid.length < 5 || this.user.uid.length > 12) {\n        this.$message({\n          message: '账号长度为5-12位',\n          type: 'error'\n        });\n        return false;\n      } else if (!/^[a-zA-Z0-9_]+$/.test(this.user.uid)) {\n        this.$message({\n          message: '账号只能由字母、数字、下划线组成',\n          type: 'error'\n        });\n        return false;\n      } else {\n        axios.get('/api/users/id/' + this.user.uid).then(res => {\n          if (res.data.code === 20041) {\n            this.isExist = true; //账号存在\n            this.$message({\n              message: res.data.msg,\n              type: 'error'\n            });\n            return false;\n          } else if (res.data.code === 20040) {\n            this.isExist = false; //账号不存在\n            this.$message({\n              message: res.data.msg,\n              type: 'success'\n            });\n            return true;\n          }\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    },\n    //验证姓名\n    nameBlur() {\n      if (this.user.uname === '') {\n        this.$message({\n          message: '请输入姓名',\n          type: 'error'\n        });\n        return false;\n      } else return true;\n    },\n    //验证手机号\n    phoneBlur() {\n      if (this.user.uphone === '') {\n        this.$message({\n          message: '请输入手机号',\n          type: 'error'\n        });\n        return false;\n      } else if (this.user.uphone.length !== 11) {\n        this.$message({\n          message: '手机号长度为11位',\n          type: 'error'\n        });\n        return false;\n      } else if (!/^[1][3,4,5,7,8][0-9]{9}$/.test(this.user.uphone)) {\n        this.$message({\n          message: '手机号格式不正确',\n          type: 'error'\n        });\n        return false;\n      } else if (!/^[0-9]+$/.test(this.user.uphone)) {\n        this.$message({\n          message: '手机号必须是数字',\n          type: 'error'\n        });\n      } else return true;\n    },\n    //验证密码\n    pwdBlur() {\n      if (this.user.password === '') {\n        this.$message({\n          message: '请输入密码',\n          type: 'error'\n        });\n        return false;\n      } else if (this.user.password.length < 4 || this.user.password.length > 12) {\n        this.$message({\n          message: '密码长度为4-12位',\n          type: 'error'\n        });\n        return false;\n      } else if (!/^[a-zA-Z0-9_]+$/.test(this.user.password)) {\n        this.$message({\n          message: '密码只能由字母、数字、下划线组成',\n          type: 'error'\n        });\n        return false;\n      } else if (this.user.password === this.user.uid) {\n        this.$message({\n          message: '密码不能与账号相同',\n          type: 'error'\n        });\n        return false;\n      } else return true;\n    },\n    //验证确认密码\n    _pwdBlur() {\n      // console.log(this._password);\n      if (this._password === '' || this._password == null) {\n        this.$message({\n          message: '请再次输入密码',\n          type: 'error'\n        });\n        return false;\n      } else if (this._password !== this.user.password) {\n        this.$message({\n          message: '两次密码不一致',\n          type: 'error'\n        });\n        return false;\n      } else return true;\n    },\n    //验证验证码\n    checkCodeBlur() {\n      if (this.checkCode === '') {\n        // console.log(\"--\"+this.checkCode);\n        this.$message({\n          message: '请输入验证码',\n          type: 'error'\n        });\n        return false;\n      } else return true;\n    },\n    //注册\n    register() {\n      if (this.user.uid === '' || this.user.uname === '' || this.user.uphone === '' || this.user.password === '' || this._password === '' || this.checkCode === '') {\n        this.$message({\n          message: '请填写完整信息',\n          type: 'error'\n        });\n        return false;\n      }\n      if (this.isExist === true) {\n        this.$message({\n          message: '此账号已存在，请换一个',\n          type: 'error'\n        });\n        return false;\n      } else {\n        axios.post('/api/users/register', {\n          user: this.user,\n          checkCode: this.checkCode\n        }).then(res => {\n          if (res.data.code === 30000) {\n            this.$message({\n              message: '注册成功',\n              type: 'success'\n            });\n            this.freshCheckCode();\n            this.$router.push({\n              path: '/'\n            });\n          } else {\n            this.$message({\n              message: res.data.msg,\n              type: 'error'\n            });\n            this.freshCheckCode();\n          }\n        });\n      }\n    }\n  },\n  mounted() {\n    this.freshCheckCode();\n    this.$nextTick(() => {\n      document.title = '注册';\n    });\n  }\n};\nexport default options;","map":{"version":3,"names":["axios","options","data","_password","checkCode","isExist","user","uid","uname","uphone","password","methods","goLogin","$store","commit","$router","push","path","freshCheckCode","document","getElementById","src","Date","getTime","idBlur","$message","message","type","length","test","get","then","res","code","msg","catch","err","console","log","nameBlur","phoneBlur","pwdBlur","_pwdBlur","checkCodeBlur","register","post","mounted","$nextTick","title"],"sources":["src/views/Register.vue"],"sourcesContent":["<template>\n  <div class=\"rg_bg\">\n    <div class=\"rg_layout\">\n      <div class=\"rg_left\">\n        <p>新用户注册</p>\n        <p>USER REGISTER</p>\n      </div>\n      <div class=\"rg_center\">\n        <div class=\"rg_form\">\n          <form action=\"#\" method=\"post\">\n            <table class=\"rg_table\">\n              <tr>\n                <td class=\"td_left\"><label for=\"username\">用户名</label></td>\n                <td class=\"td_right\">\n                  <input type=\"text\" name=\"username\" id=\"username\"\n                         placeholder=\"请输入用户名\" v-model=\"user.uid\"\n                         v-on:blur=\"idBlur\">\n                </td>\n              </tr>\n              <tr>\n                <td class=\"td_left\"><label for=\"name\">姓名</label></td>\n                <td class=\"td_right\">\n                  <input type=\"text\" name=\"name\" id=\"name\"\n                         placeholder=\"请输入姓名\" v-model=\"user.uname\"\n                         v-on:blur=\"nameBlur\"></td>\n              </tr>\n              <tr>\n                <td class=\"td_left\"><label for=\"tel\">手机号</label></td>\n                <td class=\"td_right\">\n                  <input type=\"text\" name=\"tel\" id=\"tel\"\n                         placeholder=\"请输入手机号\" v-model=\"user.uphone\"\n                         v-on:blur=\"phoneBlur\"></td>\n              </tr>\n              <tr>\n                <td class=\"td_left\"><label for=\"password\">密码</label></td>\n                <td class=\"td_right\">\n                  <input type=\"password\" name=\"password\" id=\"password\"\n                         placeholder=\"请输入密码\" v-model=\"user.password\"\n                         v-on:blur=\"pwdBlur\">\n                </td>\n              </tr>\n              <tr>\n                <td class=\"td_left\"><label for=\"password\">确认密码</label></td>\n                <td class=\"td_right\">\n                  <input type=\"password\" name=\"_password\" id=\"_password\"\n                         placeholder=\"请再次输入密码\" v-model=\"_password\"\n                         v-on:blur=\"_pwdBlur\">\n                </td>\n              </tr>\n              <tr>\n                <td class=\"td_left\"><label for=\"checkcode\">验证码</label></td>\n                <td class=\"td_right\"><input type=\"text\" name=\"checkcode\"\n                                            id=\"checkcode\" v-model=\"checkCode\"\n                                            v-on:blur=\"checkCodeBlur\"\n                                            placeholder=\"请输入验证码\"\n                                            @keyup.enter=\"register\">\n                  <img id=\"img_check\" src=\"/api/checkCode\" title=\"看不清?点击换一张\"\n                       alt=\"加载失败\" @click=\"freshCheckCode\">\n                </td>\n              </tr>\n              <tr>\n                <td colspan=\"2\" align=\"center\"><input type=\"button\"\n                                                      id=\"btn_sub\" value=\"注册\"\n                                                      @click=\"register\"></td>\n              </tr>\n            </table>\n          </form>\n        </div>\n      </div>\n      <div class=\"rg_right\">\n        <p>已有账号?\n          <a @click=\"goLogin\" href=\"/#/\">立即登录</a>\n          <!-- <router-link :to=\"{ path: './login' }\">立即登录</router-link> -->\n        </p>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport axios from 'axios';\n\nconst options = {\n  data() {\n    return {\n      _password: '',//确认密码\n      checkCode: '', //验证码\n      isExist: false, //账号是否存在\n      user: {\n        uid: '',\n        uname: '',\n        uphone: '',\n        password: ''\n      }\n    };\n  },\n  methods: {\n    //跳转到登录页面\n    goLogin() {\n      this.$store.commit('setFlash', true);\n      this.$router.push({path: '/login'});\n    },\n    //刷新验证码\n    freshCheckCode() {\n      document.getElementById('img_check').src =\n          '/api/checkCode?id=' + new Date().getTime();\n    },\n    //验证账号是否存在\n    idBlur() {\n      if (this.user.uid === '') {\n        this.$message({\n          message: '请输入账号',\n          type: 'error'\n        });\n        return false;\n      } else if(this.user.uid.length < 5 || this.user.uid.length > 12) {\n        this.$message({\n          message: '账号长度为5-12位',\n          type: 'error'\n        });\n        return false;\n      } else if(!/^[a-zA-Z0-9_]+$/.test(this.user.uid)) {\n        this.$message({\n          message: '账号只能由字母、数字、下划线组成',\n          type: 'error'\n        });\n        return false;\n      }\n      else {\n        axios.get('/api/users/id/' + this.user.uid).then((res) => {\n          if (res.data.code === 20041) {\n            this.isExist = true;  //账号存在\n            this.$message({\n              message: res.data.msg,\n              type: 'error'\n            });\n            return false;\n          } else if (res.data.code === 20040) {\n            this.isExist = false; //账号不存在\n            this.$message({\n              message: res.data.msg,\n              type: 'success'\n            });\n            return true;\n          }\n        }).catch((err) => {\n          console.log(err);\n        });\n      }\n    },\n    //验证姓名\n    nameBlur() {\n      if (this.user.uname === '') {\n        this.$message({\n          message: '请输入姓名',\n          type: 'error'\n        });\n        return false;\n      } else\n        return true;\n    },\n    //验证手机号\n    phoneBlur() {\n      if (this.user.uphone === '') {\n        this.$message({\n          message: '请输入手机号',\n          type: 'error'\n        });\n        return false;\n      } else if(this.user.uphone.length !== 11) {\n        this.$message({\n          message: '手机号长度为11位',\n          type: 'error'\n        });\n        return false;\n      } else if(!/^[1][3,4,5,7,8][0-9]{9}$/.test(this.user.uphone)) {\n        this.$message({\n          message: '手机号格式不正确',\n          type: 'error'\n        });\n        return false;\n      } else if(!/^[0-9]+$/.test(this.user.uphone)) {\n        this.$message({\n          message: '手机号必须是数字',\n          type: 'error'\n        });\n      } else\n        return true;\n    },\n    //验证密码\n    pwdBlur() {\n      if (this.user.password === '') {\n        this.$message({\n          message: '请输入密码',\n          type: 'error'\n        });\n        return false;\n      } else if(this.user.password.length < 4 || this.user.password.length > 12){\n        this.$message({\n          message: '密码长度为4-12位',\n          type: 'error'\n        });\n        return false;\n      } else if(!/^[a-zA-Z0-9_]+$/.test(this.user.password)) {\n        this.$message({\n          message: '密码只能由字母、数字、下划线组成',\n          type: 'error'\n        });\n        return false;\n      } else if(this.user.password === this.user.uid) {\n        this.$message({\n          message: '密码不能与账号相同',\n          type: 'error'\n        });\n        return false;\n      } else\n        return true;\n    },\n    //验证确认密码\n    _pwdBlur() {\n      // console.log(this._password);\n      if (this._password === '' || this._password == null) {\n        this.$message({\n          message: '请再次输入密码',\n          type: 'error'\n        });\n        return false;\n      } else if (this._password !== this.user.password) {\n        this.$message({\n          message: '两次密码不一致',\n          type: 'error'\n        });\n        return false;\n      } else\n        return true;\n    },\n    //验证验证码\n    checkCodeBlur() {\n      if (this.checkCode === '') {\n        // console.log(\"--\"+this.checkCode);\n        this.$message({\n          message: '请输入验证码',\n          type: 'error'\n        });\n        return false;\n      } else\n        return true;\n    },\n    //注册\n    register() {\n      if (this.user.uid === '' || this.user.uname === ''\n          || this.user.uphone === '' || this.user.password === ''\n          || this._password === '' || this.checkCode === '') {\n        this.$message({\n          message: '请填写完整信息',\n          type: 'error'\n        });\n        return false;\n      }\n      if (this.isExist === true) {\n        this.$message({\n          message: '此账号已存在，请换一个',\n          type: 'error'\n        });\n        return false;\n      } else {\n        axios.post('/api/users/register', {\n          user: this.user,\n          checkCode: this.checkCode\n        }).then((res) => {\n          if (res.data.code === 30000) {\n            this.$message({\n              message: '注册成功',\n              type: 'success'\n            });\n            this.freshCheckCode();\n            this.$router.push({path: '/'});\n          } else {\n            this.$message({\n              message: res.data.msg,\n              type: 'error'\n            });\n            this.freshCheckCode();\n          }\n        })\n      }\n    }\n  },\n  mounted() {\n    this.freshCheckCode();\n    this.$nextTick(() => {\n      document.title = '注册';\n    });\n  }\n}\nexport default options;\n</script>\n<style>\n.rg_table {\n  margin-top: 60px;\n  border-spacing: 10px;\n}\n\n.rg_bg {\n  width: 100%;\n  margin: auto;\n  background-image: linear-gradient(to right, #fbc2eb, #a6c1ee);\n  position: absolute;\n  height: 100%;\n}\n\n.rg_layout {\n  width: 900px;\n  height: 500px;\n  border: 5px solid #EEEEEE;\n  border-radius: 15px;\n  background-color: white;\n  /*让div水平居中*/\n  margin: auto;\n  margin-top: 11%;\n}\n\n.rg_left {\n  float: left;\n  margin: 15px;\n  width: 20%;\n}\n\n.rg_left > p:first-child {\n  color: #FFD026;\n  font-size: 20px;\n}\n\n.rg_left > p:last-child {\n  color: #A6A6A6;\n}\n\n.rg_center {\n  float: left;\n  width: 450px;\n  margin: 15px;\n}\n\n.rg_right {\n  float: right;\n  margin: 15px;\n}\n\n.rg_right > p:first-child {\n  font-size: 15px;\n}\n\n.rg_right p a {\n  color: #a6c1ee;\n}\n\n.td_left {\n  width: 100px;\n  text-align: right;\n  height: 45px;\n}\n\n.td_right {\n  padding-left: 50px;\n}\n\n#username,\n#password,\n#_password,\n#name,\n#tel,\n#checkcode {\n  width: 251px;\n  height: 32px;\n  border: 1px solid #A6A6A6;\n  /*设置边框圆角*/\n  border-radius: 5px;\n  padding-left: 10px;\n}\n\n#checkcode {\n  width: 110px;\n}\n\n#img_check {\n  margin-left: 15px;\n  height: 40px;\n  /*设置垂直居中*/\n  vertical-align: middle;\n  border-radius: 5px;\n}\n\n#btn_sub {\n  cursor: pointer;\n  border-radius: 8px;\n  width: 150px;\n  height: 40px;\n  background-color: #FFD026;\n  border: 1px solid #FFD026;\n  margin-top: 20px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}